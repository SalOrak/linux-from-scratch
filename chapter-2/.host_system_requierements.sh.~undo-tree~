(undo-tree-save-format-version . 1)
"8c1a01660ca09100dcdae822bc92f72a7782c59d"
[nil nil nil nil (26086 5730 148174 354000) 0 nil]
([nil nil ((nil rear-nonsticky nil 2796 . 2797) (nil fontified nil 1 . 2) (nil fontified nil 13 . 15) (nil fontified nil 78 . 79) (nil fontified nil 152 . 154) (nil fontified nil 193 . 194) (nil fontified nil 204 . 208) (nil fontified nil 223 . 224) (nil fontified nil 261 . 309) (nil fontified nil 330 . 334) (nil fontified nil 375 . 400) (nil fontified nil 421 . 422) (nil fontified nil 434 . 439) (nil fontified nil 467 . 470) (nil fontified nil 476 . 481) (nil fontified nil 527 . 530) (nil fontified nil 533 . 536) (nil fontified nil 608 . 611) (nil fontified nil 676 . 679) (nil fontified nil 685 . 697) (nil fontified nil 745 . 748) (nil fontified nil 754 . 766) (nil fontified nil 823 . 828) (nil fontified nil 839 . 842) (nil fontified nil 845 . 848) (nil fontified nil 861 . 866) (nil fontified nil 908 . 911) (nil fontified nil 979 . 982) (nil fontified nil 988 . 1000) (nil fontified nil 1047 . 1050) (nil fontified nil 1056 . 1068) (nil fontified nil 1144 . 1149) (nil fontified nil 1160 . 1163) (nil fontified nil 1166 . 1169) (nil fontified nil 1233 . 1279) (nil fontified nil 1305 . 1501) (nil fontified nil 2480 . 2481) (nil fontified nil 2504 . 2506) (nil fontified nil 2544 . 2549) (nil fontified nil 2574 . 2579) (nil fontified nil 2615 . 2628) (nil fontified nil 2657 . 2660) (nil fontified nil 2725 . 2729) (nil fontified nil 2730 . 2733) (1 . 2797)) ((#("#!/bin/bash
# A script to list version numbers of critical development tools

# If you have tools installed in other directories, adjust PATH here AND
# in ~lfs/.bashrc (section 4.4) as well.

LC_ALL=C 
PATH=/usr/bin:/bin

bail() { echo \"FATAL: $1\"; exit 1; }
grep --version > /dev/null 2> /dev/null || bail \"grep does not work\"
sed '' /dev/null || bail \"sed does not work\"
sort   /dev/null || bail \"sort does not work\"

ver_check()
{
   if ! type -p $2 &>/dev/null
   then 
     echo \"ERROR: Cannot find $2 ($1)\"; return 1; 
   fi
   v=$($2 --version 2>&1 | grep -E -o '[0-9]+\\.[0-9\\.]+[a-z]*' | head -n1)
   if printf '%s\\n' $3 $v | sort --version-sort --check &>/dev/null
   then 
     printf \"OK:    %-9s %-6s >= $3\\n\" \"$1\" \"$v\"; return 0;
   else 
     printf \"ERROR: %-9s is TOO OLD ($3 or later required)\\n\" \"$1\"; 
     return 1; 
   fi
}

ver_kernel()
{
   kver=$(uname -r | grep -E -o '^[0-9\\.]+')
   if printf '%s\\n' $1 $kver | sort --version-sort --check &>/dev/null
   then 
     printf \"OK:    Linux Kernel $kver >= $1\\n\"; return 0;
   else 
     printf \"ERROR: Linux Kernel ($kver) is TOO OLD ($1 or later required)\\n\" \"$kver\"; 
     return 1; 
   fi
}

# Coreutils first because --version-sort needs Coreutils >= 7.0
ver_check Coreutils      sort     8.1 || bail \"Coreutils too old, stop\"
ver_check Bash           bash     3.2
ver_check Binutils       ld       2.13.1
ver_check Bison          bison    2.7
ver_check Diffutils      diff     2.8.1
ver_check Findutils      find     4.2.31
ver_check Gawk           gawk     4.0.1
ver_check GCC            gcc      5.2
ver_check \"GCC (C++)\"    g++      5.2
ver_check Grep           grep     2.5.1a
ver_check Gzip           gzip     1.3.12
ver_check M4             m4       1.4.10
ver_check Make           make     4.0
ver_check Patch          patch    2.5.4
ver_check Perl           perl     5.8.8
ver_check Python         python3  3.4
ver_check Sed            sed      4.1.5
ver_check Tar            tar      1.22
ver_check Texinfo        texi2any 5.0
ver_check Xz             xz       5.0.0
ver_kernel 4.19

if mount | grep -q 'devpts on /dev/pts' && [ -e /dev/ptmx ]
then echo \"OK:    Linux Kernel supports UNIX 98 PTY\";
else echo \"ERROR: Linux Kernel does NOT support UNIX 98 PTY\"; fi

alias_check() {
   if $1 --version 2>&1 | grep -qi $2
   then printf \"OK:    %-4s is $2\\n\" \"$1\";
   else printf \"ERROR: %-4s is NOT $2\\n\" \"$1\"; fi
}
echo \"Aliases:\"
alias_check awk GNU
alias_check yacc Bison
alias_check sh Bash

echo \"Compiler check:\"
if printf \"int main(){}\" | g++ -x c++ -
then echo \"OK:    g++ works\";
else echo \"ERROR: g++ does NOT work\"; fi
rm -f a.out

if [ \"$(nproc)\" = \"\" ]; then
   echo \"ERROR: nproc is not available or it produces empty output\"
else
   echo \"OK: nproc reports $(nproc) logical cores are available\"
fi" 0 1 (face font-lock-comment-delimiter-face fontified nil) 1 7 (face font-lock-comment-face fontified nil) 7 11 (face font-lock-keyword-face fontified nil) 11 12 (face font-lock-comment-face fontified nil) 12 14 (face font-lock-comment-delimiter-face fontified nil) 14 77 (face font-lock-comment-face fontified nil) 77 78 (fontified nil) 78 80 (face font-lock-comment-delimiter-face fontified nil) 80 151 (face font-lock-comment-face fontified nil) 151 153 (face font-lock-comment-delimiter-face fontified nil) 153 192 (face font-lock-comment-face fontified nil) 192 193 (fontified nil) 193 199 (face font-lock-variable-name-face fontified nil) 199 203 (fontified nil) 203 207 (face font-lock-variable-name-face fontified nil) 207 222 (fontified nil) 222 223 (fontified nil) 223 227 (face font-lock-function-name-face fontified nil) 227 232 (fontified nil) 232 236 (face font-lock-builtin-face fontified nil) 236 237 (fontified nil) 237 248 (face font-lock-string-face fontified nil) 248 250 (fontified nil) 250 254 (face font-lock-keyword-face fontified nil) 254 260 (fontified nil) 260 308 (fontified nil) 308 328 (face font-lock-string-face fontified nil) 328 329 (fontified nil) 329 333 (fontified nil) 333 335 (face font-lock-string-face fontified nil) 335 354 (fontified nil) 354 373 (face font-lock-string-face fontified nil) 373 374 (fontified nil) 374 399 (fontified nil) 399 419 (face font-lock-string-face fontified nil) 419 420 (fontified nil) 420 421 (fontified nil) 421 430 (face font-lock-function-name-face fontified nil) 430 433 (fontified nil) 433 438 (fontified nil) 438 443 (face font-lock-keyword-face fontified nil) 443 447 (face font-lock-builtin-face fontified nil) 447 452 (fontified nil) 452 453 (face font-lock-variable-name-face fontified nil) 453 466 (fontified nil) 466 469 (fontified nil) 469 473 (face font-lock-keyword-face fontified nil) 473 475 (fontified nil) 475 480 (fontified nil) 480 484 (face font-lock-builtin-face fontified nil) 484 485 (fontified nil) 485 513 (face font-lock-string-face fontified nil) 513 515 (fontified nil) 515 521 (face font-lock-keyword-face fontified nil) 521 526 (fontified nil) 526 529 (fontified nil) 529 531 (face font-lock-keyword-face fontified nil) 531 532 (fontified nil) 532 535 (fontified nil) 535 536 (face font-lock-variable-name-face fontified nil) 536 540 (fontified nil) 540 541 (face font-lock-variable-name-face fontified nil) 541 570 (fontified nil) 570 594 (face font-lock-string-face fontified nil) 594 607 (fontified nil) 607 610 (fontified nil) 610 612 (face font-lock-keyword-face fontified nil) 612 620 (fontified nil) 620 626 (face font-lock-string-face fontified nil) 626 628 (fontified nil) 628 629 (face font-lock-variable-name-face fontified nil) 629 631 (fontified nil) 631 632 (face font-lock-variable-name-face fontified nil) 632 675 (fontified nil) 675 678 (fontified nil) 678 682 (face font-lock-keyword-face fontified nil) 682 684 (fontified nil) 684 696 (fontified nil) 696 722 (face font-lock-string-face fontified nil) 722 723 (fontified nil) 723 727 (face font-lock-string-face fontified nil) 727 728 (fontified nil) 728 732 (face font-lock-string-face fontified nil) 732 734 (fontified nil) 734 740 (face font-lock-keyword-face fontified nil) 740 744 (fontified nil) 744 747 (fontified nil) 747 751 (face font-lock-keyword-face fontified nil) 751 753 (fontified nil) 753 765 (fontified nil) 765 814 (face font-lock-string-face fontified nil) 814 815 (fontified nil) 815 819 (face font-lock-string-face fontified nil) 819 822 (fontified nil) 822 827 (fontified nil) 827 833 (face font-lock-keyword-face fontified nil) 833 838 (fontified nil) 838 841 (fontified nil) 841 843 (face font-lock-keyword-face fontified nil) 843 844 (fontified nil) 844 847 (fontified nil) 847 857 (face font-lock-function-name-face fontified nil) 857 860 (fontified nil) 860 865 (fontified nil) 865 869 (face font-lock-variable-name-face fontified nil) 869 894 (fontified nil) 894 905 (face font-lock-string-face fontified nil) 905 907 (fontified nil) 907 910 (fontified nil) 910 912 (face font-lock-keyword-face fontified nil) 912 920 (fontified nil) 920 926 (face font-lock-string-face fontified nil) 926 928 (fontified nil) 928 929 (face font-lock-variable-name-face fontified nil) 929 931 (fontified nil) 931 935 (face font-lock-variable-name-face fontified nil) 935 978 (fontified nil) 978 981 (fontified nil) 981 985 (face font-lock-keyword-face fontified nil) 985 987 (fontified nil) 987 999 (fontified nil) 999 1034 (face font-lock-string-face fontified nil) 1034 1036 (fontified nil) 1036 1042 (face font-lock-keyword-face fontified nil) 1042 1046 (fontified nil) 1046 1049 (fontified nil) 1049 1053 (face font-lock-keyword-face fontified nil) 1053 1055 (fontified nil) 1055 1067 (fontified nil) 1067 1132 (face font-lock-string-face fontified nil) 1132 1133 (fontified nil) 1133 1140 (face font-lock-string-face fontified nil) 1140 1143 (fontified nil) 1143 1148 (fontified nil) 1148 1154 (face font-lock-keyword-face fontified nil) 1154 1159 (fontified nil) 1159 1162 (fontified nil) 1162 1164 (face font-lock-keyword-face fontified nil) 1164 1165 (fontified nil) 1165 1168 (fontified nil) 1168 1170 (face font-lock-comment-delimiter-face fontified nil) 1170 1232 (face font-lock-comment-face fontified nil) 1232 1278 (fontified nil) 1278 1303 (face font-lock-string-face fontified nil) 1303 1304 (fontified nil) 1304 1500 (fontified nil) 1500 1502 (fontified nil) 1502 1590 (fontified nil) 1590 1601 (face font-lock-string-face fontified nil) 1601 2071 (fontified nil) 2071 2073 (face font-lock-keyword-face fontified nil) 2073 2090 (fontified nil) 2090 2110 (face font-lock-string-face fontified nil) 2110 2131 (fontified nil) 2131 2136 (face font-lock-keyword-face fontified nil) 2136 2140 (face font-lock-builtin-face fontified nil) 2140 2141 (fontified nil) 2141 2183 (face font-lock-string-face fontified nil) 2183 2185 (fontified nil) 2185 2190 (face font-lock-keyword-face fontified nil) 2190 2194 (face font-lock-builtin-face fontified nil) 2194 2195 (fontified nil) 2195 2245 (face font-lock-string-face fontified nil) 2245 2247 (fontified nil) 2247 2249 (face font-lock-keyword-face fontified nil) 2249 2250 (fontified nil) 2250 2251 (fontified nil) 2251 2262 (face font-lock-function-name-face fontified nil) 2262 2270 (fontified nil) 2270 2272 (face font-lock-keyword-face fontified nil) 2272 2274 (fontified nil) 2274 2275 (face font-lock-variable-name-face fontified nil) 2275 2303 (fontified nil) 2303 2304 (face font-lock-variable-name-face fontified nil) 2304 2308 (fontified nil) 2308 2312 (face font-lock-keyword-face fontified nil) 2312 2320 (fontified nil) 2320 2341 (face font-lock-string-face fontified nil) 2341 2342 (fontified nil) 2342 2346 (face font-lock-string-face fontified nil) 2346 2351 (fontified nil) 2351 2355 (face font-lock-keyword-face fontified nil) 2355 2363 (fontified nil) 2363 2388 (face font-lock-string-face fontified nil) 2388 2389 (fontified nil) 2389 2393 (face font-lock-string-face fontified nil) 2393 2395 (fontified nil) 2395 2397 (face font-lock-keyword-face fontified nil) 2397 2400 (fontified nil) 2400 2404 (face font-lock-builtin-face fontified nil) 2404 2405 (fontified nil) 2405 2415 (face font-lock-string-face fontified nil) 2415 2479 (fontified nil) 2479 2480 (fontified nil) 2480 2484 (face font-lock-builtin-face fontified nil) 2484 2485 (fontified nil) 2485 2502 (face font-lock-string-face fontified nil) 2502 2503 (fontified nil) 2503 2505 (face font-lock-keyword-face fontified nil) 2505 2513 (fontified nil) 2513 2527 (face font-lock-string-face fontified nil) 2527 2543 (fontified nil) 2543 2548 (face font-lock-keyword-face fontified nil) 2548 2552 (face font-lock-builtin-face fontified nil) 2552 2553 (fontified nil) 2553 2571 (face font-lock-string-face fontified nil) 2571 2573 (fontified nil) 2573 2578 (face font-lock-keyword-face fontified nil) 2578 2582 (face font-lock-builtin-face fontified nil) 2582 2583 (fontified nil) 2583 2609 (face font-lock-string-face fontified nil) 2609 2611 (fontified nil) 2611 2613 (face font-lock-keyword-face fontified nil) 2613 2614 (fontified nil) 2614 2627 (fontified nil) 2627 2629 (face font-lock-keyword-face fontified nil) 2629 2632 (fontified nil) 2632 2642 (face font-lock-string-face fontified nil) 2642 2645 (fontified nil) 2645 2647 (face font-lock-string-face fontified nil) 2647 2651 (fontified nil) 2651 2655 (face font-lock-keyword-face fontified nil) 2655 2656 (fontified nil) 2656 2659 (fontified nil) 2659 2663 (face font-lock-builtin-face fontified nil) 2663 2664 (fontified nil) 2664 2723 (face font-lock-string-face fontified nil) 2723 2724 (fontified nil) 2724 2728 (face font-lock-keyword-face fontified nil) 2728 2729 (fontified nil) 2729 2732 (fontified nil) 2732 2736 (face font-lock-builtin-face fontified nil) 2736 2737 (fontified nil) 2737 2793 (face font-lock-string-face fontified nil) 2793 2794 (fontified nil) 2794 2795 (face font-lock-keyword-face fontified nil) 2795 2796 (face font-lock-keyword-face fontified nil rear-nonsticky nil)) . 1) (undo-tree-id395 . -2627) (undo-tree-id396 . -2796) (undo-tree-id397 . -2796) (undo-tree-id398 . -2795) (undo-tree-id399 . -987) (undo-tree-id400 . 1750) (undo-tree-id401 . -989) (undo-tree-id402 . -989) (undo-tree-id403 . -2656) (undo-tree-id404 . -2656) (undo-tree-id405 . -2054) (undo-tree-id406 . -2627) (undo-tree-id407 . -989) (undo-tree-id408 . -2627) (undo-tree-id409 . -2479) (undo-tree-id410 . -2627) (undo-tree-id411 . -2627) (undo-tree-id412 . -2627) (undo-tree-id413 . -2627) (undo-tree-id414 . -2627) (undo-tree-id415 . -2627) (undo-tree-id416 . -2627) (undo-tree-id417 . -2627) (undo-tree-id418 . -2627) (undo-tree-id419 . -2627) (undo-tree-id420 . -2627) (undo-tree-id421 . -2627) (undo-tree-id422 . -2627) (undo-tree-id423 . -2627) (undo-tree-id424 . -2796) (undo-tree-id425 . -2796) (undo-tree-id426 . -2796) (undo-tree-id427 . -2796) (undo-tree-id428 . -2796) (undo-tree-id429 . -2796) (undo-tree-id430 . -2796) (undo-tree-id431 . -2794) (undo-tree-id432 . -2796) (undo-tree-id433 . -2796) (undo-tree-id434 . -2796) (undo-tree-id435 . -2796) (undo-tree-id436 . -2796) (undo-tree-id437 . -2796) (undo-tree-id438 . -2796) (undo-tree-id439 . -2796) (undo-tree-id440 . -2796) (undo-tree-id441 . -2796) (undo-tree-id442 . -2796) (undo-tree-id443 . -2796) (undo-tree-id444 . -2796) (undo-tree-id445 . -2796) (undo-tree-id446 . -2796) (undo-tree-id447 . -2796) (undo-tree-id448 . -2796) (undo-tree-id449 . -2796) (undo-tree-id450 . -2796) (undo-tree-id451 . -2796) (undo-tree-id452 . -2796) (undo-tree-id453 . -2796) (undo-tree-id454 . -2794) (undo-tree-id455 . -2796) (undo-tree-id456 . -2796) (undo-tree-id457 . -2796) (undo-tree-id458 . -2796) (undo-tree-id459 . -2796) (undo-tree-id460 . -2796) (undo-tree-id461 . -2796) (undo-tree-id462 . -2796) (undo-tree-id463 . -2796) (undo-tree-id464 . -2796) (undo-tree-id465 . -2796) (undo-tree-id466 . -2796) (undo-tree-id467 . -2796) (undo-tree-id468 . -2796) (undo-tree-id469 . -2796) (undo-tree-id470 . -2796) (undo-tree-id471 . -2796) (undo-tree-id472 . -2796) (undo-tree-id473 . -2796) (undo-tree-id474 . -2796) (undo-tree-id475 . -2796) (undo-tree-id476 . -2796) (undo-tree-id477 . -2794) (undo-tree-id478 . -2796) (undo-tree-id479 . -2796) (undo-tree-id480 . -2796) (undo-tree-id481 . -2796) (undo-tree-id482 . -2796) (undo-tree-id483 . -2796) (undo-tree-id484 . -2796) (undo-tree-id485 . -2796) (undo-tree-id486 . -2796) (undo-tree-id487 . -2796) (undo-tree-id488 . -2796) (undo-tree-id489 . -2796) (undo-tree-id490 . -2796) (undo-tree-id491 . -2796) (undo-tree-id492 . -2796) (undo-tree-id493 . -2796) (undo-tree-id494 . -2796) (undo-tree-id495 . -2796) (undo-tree-id496 . -2796) (undo-tree-id497 . -2796) (undo-tree-id498 . -2796) (undo-tree-id499 . -2796) (undo-tree-id500 . -2796) (undo-tree-id501 . -2796) (nil fontified t 2730 . 2733) (nil fontified t 2725 . 2729) (nil fontified t 2657 . 2660) (nil fontified t 2615 . 2628) (nil fontified t 2574 . 2579) (nil fontified t 2544 . 2549) (nil fontified t 2504 . 2506) (nil fontified t 2480 . 2481) (nil fontified t 1305 . 1501) (nil fontified t 1233 . 1279) (nil fontified t 1166 . 1169) (nil fontified t 1160 . 1163) (nil fontified t 1144 . 1149) (nil fontified t 1056 . 1068) (nil fontified t 1047 . 1050) (nil fontified t 988 . 1000) (nil fontified t 979 . 982) (nil fontified t 908 . 911) (nil fontified t 861 . 866) (nil fontified t 845 . 848) (nil fontified t 839 . 842) (nil fontified t 823 . 828) (nil fontified t 754 . 766) (nil fontified t 745 . 748) (nil fontified t 685 . 697) (nil fontified t 676 . 679) (nil fontified t 608 . 611) (nil fontified t 533 . 536) (nil fontified t 527 . 530) (nil fontified t 476 . 481) (nil fontified t 467 . 470) (nil fontified t 434 . 439) (nil fontified t 421 . 422) (nil fontified t 375 . 400) (nil fontified t 330 . 334) (nil fontified t 261 . 309) (nil fontified t 223 . 224) (nil fontified t 204 . 208) (nil fontified t 193 . 194) (nil fontified t 152 . 154) (nil fontified t 78 . 79) (nil fontified t 13 . 15) (nil fontified t 1 . 2) (nil rear-nonsticky t 2796 . 2797)) (26086 5730 213128 720000) 0 nil])
([nil nil ((2797 . 2798)) ((#("
" 0 1 (fontified t)) . 2797) (undo-tree-id393 . -1) (undo-tree-id394 . -1) (t 26086 5334 827538 33000)) (26086 5730 338937 557000) 0 nil])
([nil nil ((#("return " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 1149) (undo-tree-id502 . -6) (undo-tree-id503 . -7) (t 26086 5334 827538 33000)) nil (26086 7516 672501 195000) 0 nil])
([nil nil ((1153 . 1154) (1149 . 1149) (1149 . 1153)) nil (26086 7516 672489 755000) 0 nil])
([nil nil ((#("return " 0 6 (face font-lock-keyword-face fontified t) 6 7 (fontified t)) . 828) (undo-tree-id504 . -6) (t 26086 7516 673986 712000)) nil (26086 7521 835566 158000) 0 nil])
([nil nil ((828 . 833)) nil (26086 7527 66486 462000) 0 nil])
([nil nil ((#("exit " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 1147) (undo-tree-id654 . -4) (undo-tree-id655 . -5) (t 26086 7521 838020 929000)) nil (26086 7547 716757 801000) 0 nil] [nil nil ((832 . 837) (t 26086 7521 838020 929000)) ((#("




" 0 1 (fontified t) 1 2 (fontified t) 2 3 (fontified t) 3 4 (fontified t) 4 5 (fontified t)) . 832) (undo-tree-id505 . -3) (undo-tree-id506 . -3) (undo-tree-id507 . -3)) (26086 7527 66324 131000) 0 nil])
([nil nil ((1152 . 1154) (#("e" 0 1 (fontified t)) . -1152) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (#("n" 0 1 (fontified t)) . -1153) (undo-tree-id611 . -1) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (undo-tree-id616 . -1) (undo-tree-id617 . -1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (undo-tree-id624 . -1) (undo-tree-id625 . -1) (undo-tree-id626 . -1) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (undo-tree-id629 . -1) (undo-tree-id630 . -1) (undo-tree-id631 . -1) (undo-tree-id632 . -1) (undo-tree-id633 . -1) (undo-tree-id634 . -1) (undo-tree-id635 . -1) (undo-tree-id636 . -1) (undo-tree-id637 . -1) (undo-tree-id638 . -1) (undo-tree-id639 . -1) (undo-tree-id640 . -1) (undo-tree-id641 . -1) (undo-tree-id642 . -1) (undo-tree-id643 . -1) (undo-tree-id644 . -1) (undo-tree-id645 . -1) (undo-tree-id646 . -1) (undo-tree-id647 . -1) (undo-tree-id648 . -1) (undo-tree-id649 . -1) (undo-tree-id650 . -1) (undo-tree-id651 . -1) (undo-tree-id652 . -1) (undo-tree-id653 . -1) 1154 (1153 . 1153) (1153 . 1154) (1147 . 1147) (1147 . 1153)) nil (26086 7547 716751 641000) 0 nil])
nil
([nil nil ((#("exit " 0 4 (face font-lock-keyword-face fontified t) 4 5 (fontified t)) . 828) (undo-tree-id656 . -4) (undo-tree-id657 . -5) (undo-tree-id658 . -5) (undo-tree-id659 . -5) (undo-tree-id660 . -5) (undo-tree-id661 . -5) (undo-tree-id662 . -5) (undo-tree-id663 . -5) (undo-tree-id664 . -5) (undo-tree-id665 . -5) (undo-tree-id666 . -5) (undo-tree-id667 . -5) (undo-tree-id668 . -5) (undo-tree-id669 . -5) (undo-tree-id670 . -5) (undo-tree-id671 . -5) (undo-tree-id672 . -5) (undo-tree-id673 . -5) (undo-tree-id674 . -5) (undo-tree-id675 . -5) (undo-tree-id676 . -5) (t 26086 7547 718192 416000)) nil (26086 7553 530606 292000) 0 nil])
([nil nil ((828 . 835)) nil (26086 7553 530573 682000) 0 nil])
([nil nil ((222 . 223) (t 26086 7553 530230 927000) 215) nil (26086 7563 150820 417000) 0 nil])
([nil nil ((223 . 224) 223) nil (26086 7563 150817 717000) 0 nil])
([nil nil ((231 . 231) (231 . 232) (230 . 230) (230 . 231) (229 . 229) (229 . 230) (224 . 224) (224 . 229)) nil (26086 7563 150811 807000) 0 nil])
([nil nil ((845 . 845) (845 . 846) (844 . 844) (844 . 845) (839 . 839) (839 . 844) (838 . 839) (832 . 838) (t 26086 7563 154294 698000) 771) nil (26086 7571 789450 497000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1172 . 1173) (#("
" 0 1 (fontified nil)) . -1181) (1167 . 1182) 1092 (t 26086 7571 790351 922000)) nil (26086 7581 438064 228000) 0 nil])
([nil nil ((528 . 535) (#(" " 0 1 (fontified nil)) . 527) (undo-tree-id677 . -1) (undo-tree-id678 . -1) (undo-tree-id679 . -1) (undo-tree-id680 . -1) (undo-tree-id681 . -1) (undo-tree-id682 . -1) (undo-tree-id683 . -1) (undo-tree-id684 . -1) (undo-tree-id685 . -1) (undo-tree-id686 . -1) (undo-tree-id687 . -1) (undo-tree-id688 . -1) (undo-tree-id689 . -1) (undo-tree-id690 . -1) (undo-tree-id691 . -1) (undo-tree-id692 . -1) (undo-tree-id693 . -1) (undo-tree-id694 . -1) (undo-tree-id695 . -1) (undo-tree-id696 . -1) (undo-tree-id697 . -1) (undo-tree-id698 . -1) (undo-tree-id699 . -1) (undo-tree-id700 . -1) (undo-tree-id701 . -1) (undo-tree-id702 . -1) (undo-tree-id703 . -1) (undo-tree-id704 . -1) (undo-tree-id705 . -1) (undo-tree-id706 . -1) (undo-tree-id707 . -1) (undo-tree-id708 . -1) (undo-tree-id709 . -1) (undo-tree-id710 . -1) (undo-tree-id711 . -1) (undo-tree-id712 . -1) (undo-tree-id713 . -1) (undo-tree-id714 . -1) (undo-tree-id715 . -1) (undo-tree-id716 . -1) (undo-tree-id717 . -1) (undo-tree-id718 . -1) (undo-tree-id719 . -1) (undo-tree-id720 . -1) (undo-tree-id721 . -1) (undo-tree-id722 . -1) (undo-tree-id723 . -1) (undo-tree-id724 . -1) (undo-tree-id725 . -1) (undo-tree-id726 . -1) (undo-tree-id727 . -1) (undo-tree-id728 . -1) (undo-tree-id729 . -1) (undo-tree-id730 . -1) (undo-tree-id731 . -1) (undo-tree-id732 . -1) (undo-tree-id733 . -1) (undo-tree-id734 . -1) (undo-tree-id735 . -1) (undo-tree-id736 . -1) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) (undo-tree-id743 . -1) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (undo-tree-id746 . -1) (undo-tree-id747 . -1) (undo-tree-id748 . -1) (undo-tree-id749 . -1) (undo-tree-id750 . -1) (undo-tree-id751 . -1) (undo-tree-id752 . -1) (undo-tree-id753 . -1) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (undo-tree-id756 . -1) (undo-tree-id757 . -1) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (491 . 493) (526 . 527) (#("i" 0 1 (fontified t)) . -526) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) 527 (526 . 527) (t 26086 7581 438415 853000)) nil (26086 7592 631898 152000) 0 nil])
([nil nil ((nil rear-nonsticky nil 532 . 533) (#("
" 0 1 (fontified nil)) . -541) (527 . 542) 492 (t 26086 7592 634490 40000)) nil (26086 7593 651306 50000) 0 nil])
([nil nil ((533 . 535) (t 26086 7593 666496 878000)) nil (26086 7594 939495 194000) 0 nil])
([nil nil ((2862 . 2862) (2862 . 2869) (2861 . 2862) (t 26086 7594 938505 306000) 2861) nil (26086 7639 553733 185000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 2868)) nil (26086 7639 553732 445000) 0 nil])
([nil nil ((#("]" 0 1 (fontified t)) . 2867)) nil (26086 7639 553731 825000) 0 nil])
([nil nil ((2866 . 2866) (2866 . 2870) (#("{" 0 1 (fontified t)) . -2866) (undo-tree-id849 . -1) (#(" " 0 1 (fontified t)) . -2867) (undo-tree-id850 . -1) 2868 (2867 . 2868) (2866 . 2866) (2866 . 2867)) nil (26086 7639 553730 965000) 0 nil])
([nil nil ((2876 . 2880) (#("q" 0 1 (fontified t)) . -2876) (undo-tree-id846 . -1) (#("u" 0 1 (fontified t)) . -2877) (undo-tree-id847 . -1) (#("e" 0 1 (fontified t)) . -2878) (undo-tree-id848 . -1) 2879 (2872 . 2872) (2872 . 2879) (2867 . 2867) (2867 . 2872)) nil (26086 7639 553727 885000) 0 nil])
([nil nil ((2894 . 2894) (2894 . 2896) (2889 . 2894) (2883 . 2883) (2883 . 2889) (#("q" 0 1 (fontified t)) . -2883) (undo-tree-id842 . -1) 2884 (2883 . 2883) (2883 . 2884) (#(" " 0 1 (fontified t)) . -2883) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) 2884) nil (26086 7639 553721 495000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2890) 2895) nil (26086 7639 553707 954000) 0 nil])
([nil nil ((2892 . 2893)) nil (26086 7639 553703 264000) 0 nil])
([nil nil ((2895 . 2901) (#("h" 0 1 (fontified t)) . -2895) (undo-tree-id851 . -1) (#("c" 0 1 (fontified t)) . -2896) (undo-tree-id852 . -1) (#("o" 0 1 (fontified t)) . -2897) (undo-tree-id853 . -1) 2898 (2894 . 2894) (2894 . 2898) (2889 . 2894) (t 26086 7639 554800 943000) 2863) nil (26086 7653 390031 464000) 0 nil])
([nil nil ((2915 . 2928) (2914 . 2914) (2914 . 2915) (#("e" 0 1 (face font-lock-string-face fontified t)) . -2914) (undo-tree-id925 . -1) (#("r" 0 1 (face font-lock-string-face fontified t)) . -2915) (undo-tree-id926 . -1) 2916 (2915 . 2915) (2915 . 2916) (2904 . 2904) (2904 . 2915) (#("a" 0 1 (face font-lock-string-face fontified t)) . -2904) (undo-tree-id927 . -1) (#("$" 0 1 (face font-lock-string-face fontified t)) . -2905) (undo-tree-id928 . -1) 2906 (2903 . 2906) (2900 . 2900) (2900 . 2903) (#(" " 0 1 (face font-lock-string-face fontified t)) . -2900) (undo-tree-id929 . -1) 2901 (2900 . 2901) (t 26086 7653 390892 624000)) nil (26086 7677 130463 881000) 0 nil])
([nil nil ((#("mientar " 0 8 (face font-lock-string-face fontified t)) . 2919) (undo-tree-id924 . -7)) nil (26086 7677 130459 601000) 0 nil])
([nil nil ((#("Han habido errores %" 0 20 (face font-lock-string-face fontified t)) . 2900) (undo-tree-id854 . -19) (undo-tree-id855 . -19) (undo-tree-id856 . -19) (undo-tree-id857 . -19) (undo-tree-id858 . -19) (undo-tree-id859 . -19) (undo-tree-id860 . -19) (undo-tree-id861 . -19) (undo-tree-id862 . -19) (undo-tree-id863 . -19) (undo-tree-id864 . -19) (undo-tree-id865 . -19) (undo-tree-id866 . -19) (undo-tree-id867 . -19) (undo-tree-id868 . -19) (undo-tree-id869 . -19) (undo-tree-id870 . -19) (undo-tree-id871 . -19) (undo-tree-id872 . -19) (undo-tree-id873 . -19) (undo-tree-id874 . -19) (undo-tree-id875 . -19) (undo-tree-id876 . -19) (undo-tree-id877 . -19) (undo-tree-id878 . -19) (undo-tree-id879 . -19) (undo-tree-id880 . -19) (undo-tree-id881 . -19) (undo-tree-id882 . -19) (undo-tree-id883 . -19) (undo-tree-id884 . -19) (undo-tree-id885 . -19) (undo-tree-id886 . -19) (undo-tree-id887 . -19) (undo-tree-id888 . -19) (undo-tree-id889 . -19) (undo-tree-id890 . -19) (undo-tree-id891 . -19) (undo-tree-id892 . -19) (undo-tree-id893 . -19) (undo-tree-id894 . -19) (undo-tree-id895 . -19) (undo-tree-id896 . -19) (undo-tree-id897 . -19) (undo-tree-id898 . -19) (undo-tree-id899 . -19) (undo-tree-id900 . -19) (undo-tree-id901 . -19) (undo-tree-id902 . -19) (undo-tree-id903 . -19) (undo-tree-id904 . -19) (undo-tree-id905 . -19) (undo-tree-id906 . -19) (undo-tree-id907 . -19) (undo-tree-id908 . -19) (undo-tree-id909 . -19) (undo-tree-id910 . -19) (undo-tree-id911 . -19) (undo-tree-id912 . -19) (undo-tree-id913 . -19) (undo-tree-id914 . -19) (undo-tree-id915 . -19) (undo-tree-id916 . -19) (undo-tree-id917 . -19) (undo-tree-id918 . -19) (undo-tree-id919 . -19) (undo-tree-id920 . -19) (undo-tree-id921 . -19) (undo-tree-id922 . -19) (undo-tree-id923 . -20) 2919) nil (26086 7677 130455 571000) 0 nil])
([nil nil ((#("    echo \"\"
" 0 4 (fontified t) 4 8 (face font-lock-builtin-face fontified t) 8 9 (fontified t) 9 11 (face font-lock-string-face fontified t) 11 12 (fontified t)) . 2890) (undo-tree-id1451 . -11) (undo-tree-id1452 . 2) (undo-tree-id1453 . -10) (undo-tree-id1454 . -10) (undo-tree-id1455 . -10) (undo-tree-id1456 . -10) (undo-tree-id1457 . -10) (undo-tree-id1458 . -10) (undo-tree-id1459 . -10) (undo-tree-id1460 . -10) (undo-tree-id1461 . -10) (undo-tree-id1462 . -10) (undo-tree-id1463 . -10) (undo-tree-id1464 . -10) (undo-tree-id1465 . -10) (undo-tree-id1466 . -10) (undo-tree-id1467 . -10) (undo-tree-id1468 . -10) (undo-tree-id1469 . -10) (undo-tree-id1470 . -10) (undo-tree-id1471 . -10) (undo-tree-id1472 . -10) (undo-tree-id1473 . -10) (undo-tree-id1474 . -10) (undo-tree-id1475 . -10) (undo-tree-id1476 . -10) (undo-tree-id1477 . -10) (undo-tree-id1478 . -10) (undo-tree-id1479 . -10) (undo-tree-id1480 . -10) (undo-tree-id1481 . -10) (undo-tree-id1482 . -10) (undo-tree-id1483 . -10) (undo-tree-id1484 . -10) (undo-tree-id1485 . -10) (undo-tree-id1486 . -10) (undo-tree-id1487 . -10) (undo-tree-id1488 . -10) (undo-tree-id1489 . -10) (undo-tree-id1490 . -10) (undo-tree-id1491 . -10) (undo-tree-id1492 . -10) (undo-tree-id1493 . -10) (undo-tree-id1494 . -10) (undo-tree-id1495 . -10) (undo-tree-id1496 . -10) (undo-tree-id1497 . -10) (undo-tree-id1498 . -10) (undo-tree-id1499 . -10) (undo-tree-id1500 . -10) (undo-tree-id1501 . -10) (undo-tree-id1502 . -10) (undo-tree-id1503 . -10) (undo-tree-id1504 . -10) (undo-tree-id1505 . -10) (undo-tree-id1506 . -10) (undo-tree-id1507 . -10) (undo-tree-id1508 . -10) (undo-tree-id1509 . -10) (undo-tree-id1510 . -10) (undo-tree-id1511 . -10) (undo-tree-id1512 . -10) (undo-tree-id1513 . -10) (undo-tree-id1514 . -10) (undo-tree-id1515 . -10) (undo-tree-id1516 . -10) (undo-tree-id1517 . -10) (undo-tree-id1518 . -10) (undo-tree-id1519 . -9) (undo-tree-id1520 . -9) (undo-tree-id1521 . -9) (undo-tree-id1522 . -9) (undo-tree-id1523 . -9) (undo-tree-id1524 . -9) (undo-tree-id1525 . -9) (undo-tree-id1526 . -9) (undo-tree-id1527 . -9) (undo-tree-id1528 . -9) (undo-tree-id1529 . -9) (undo-tree-id1530 . -9) (undo-tree-id1531 . -9) (undo-tree-id1532 . -9) (undo-tree-id1533 . -9) (undo-tree-id1534 . -9) (undo-tree-id1535 . -9) (undo-tree-id1536 . -9) (undo-tree-id1537 . -9) (undo-tree-id1538 . -9) (undo-tree-id1539 . -9) (undo-tree-id1540 . -9) (undo-tree-id1541 . -9) (undo-tree-id1542 . -9) (undo-tree-id1543 . -9) (undo-tree-id1544 . -9) (undo-tree-id1545 . -9) (undo-tree-id1546 . -9) (undo-tree-id1547 . -9) (undo-tree-id1548 . -9) (undo-tree-id1549 . -9) (undo-tree-id1550 . -9) (undo-tree-id1551 . -9) (undo-tree-id1552 . -9) (undo-tree-id1553 . -9) (undo-tree-id1554 . -9) (undo-tree-id1555 . -9) (undo-tree-id1556 . -9) (undo-tree-id1557 . -10) (undo-tree-id1558 . -10) (undo-tree-id1559 . -10) (undo-tree-id1560 . -10) (undo-tree-id1561 . -10) (undo-tree-id1562 . -10) (undo-tree-id1563 . -10) (undo-tree-id1564 . -10) (undo-tree-id1565 . -10) (undo-tree-id1566 . -10) (undo-tree-id1567 . -10) (undo-tree-id1568 . -10) (undo-tree-id1569 . -10) (undo-tree-id1570 . -10) (undo-tree-id1571 . -10) (undo-tree-id1572 . -10) (undo-tree-id1573 . -10) (undo-tree-id1574 . -10) (undo-tree-id1575 . -10) (undo-tree-id1576 . -10) (undo-tree-id1577 . -10) (undo-tree-id1578 . -10) (undo-tree-id1579 . -10) (undo-tree-id1580 . -10) (undo-tree-id1581 . -10) (undo-tree-id1582 . -10) (undo-tree-id1583 . -10) (undo-tree-id1584 . -10) (undo-tree-id1585 . -10) (undo-tree-id1586 . -10) (undo-tree-id1587 . -10) (undo-tree-id1588 . -10) (undo-tree-id1589 . -10) (undo-tree-id1590 . -10) (undo-tree-id1591 . -10) (undo-tree-id1592 . -10) (undo-tree-id1593 . -10) (undo-tree-id1594 . -10) (undo-tree-id1595 . -10) (undo-tree-id1596 . -10) (undo-tree-id1597 . -10) (undo-tree-id1598 . -10) (undo-tree-id1599 . -10) (undo-tree-id1600 . -10) (undo-tree-id1601 . -10) (undo-tree-id1602 . -10) (undo-tree-id1603 . -10) (undo-tree-id1604 . -10) (undo-tree-id1605 . -10) (undo-tree-id1606 . -10) (undo-tree-id1607 . -10) (undo-tree-id1608 . -10) (undo-tree-id1609 . -10) (undo-tree-id1610 . -10) (undo-tree-id1611 . -10) (undo-tree-id1612 . -10) (undo-tree-id1613 . -10) (undo-tree-id1614 . -10) (undo-tree-id1615 . -10) (undo-tree-id1616 . -10) (undo-tree-id1617 . -10) (undo-tree-id1618 . -10) (undo-tree-id1619 . -10) (undo-tree-id1620 . -10) (undo-tree-id1621 . -10) (undo-tree-id1622 . -10) (undo-tree-id1623 . -10) (undo-tree-id1624 . -10) (undo-tree-id1625 . -10) (undo-tree-id1626 . -10) (undo-tree-id1627 . -10) (undo-tree-id1628 . -10) (undo-tree-id1629 . -10) (undo-tree-id1630 . -10) (undo-tree-id1631 . -9) (undo-tree-id1632 . -9) (undo-tree-id1633 . -9) (undo-tree-id1634 . -9) (undo-tree-id1635 . -9) (undo-tree-id1636 . -9) (undo-tree-id1637 . -9) (undo-tree-id1638 . -9) (undo-tree-id1639 . -9) (undo-tree-id1640 . -9) (undo-tree-id1641 . -9) (undo-tree-id1642 . -9) (undo-tree-id1643 . -9) (undo-tree-id1644 . -9) (undo-tree-id1645 . -9) (undo-tree-id1646 . -9) (undo-tree-id1647 . -9) (undo-tree-id1648 . -9) (undo-tree-id1649 . -9) (undo-tree-id1650 . -9) (undo-tree-id1651 . -9) (undo-tree-id1652 . -9) (undo-tree-id1653 . -9) (undo-tree-id1654 . -9) (undo-tree-id1655 . -9) (undo-tree-id1656 . -9) (undo-tree-id1657 . -9) (undo-tree-id1658 . -9) (undo-tree-id1659 . -9) (undo-tree-id1660 . -9) (undo-tree-id1661 . -9) (undo-tree-id1662 . -9) (undo-tree-id1663 . -9) (undo-tree-id1664 . -9) (undo-tree-id1665 . -9) (undo-tree-id1666 . -9) (undo-tree-id1667 . -9) (undo-tree-id1668 . -9) (undo-tree-id1669 . -9) (undo-tree-id1670 . -9) (undo-tree-id1671 . -9) (undo-tree-id1672 . -9) (undo-tree-id1673 . -9) (undo-tree-id1674 . -12) 2899 (t 26086 7677 131049 931000)) nil (26086 7692 967454 422000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2890) (undo-tree-id1420 . -4) (undo-tree-id1421 . -4) (undo-tree-id1422 . -4) (undo-tree-id1423 . -4) (undo-tree-id1424 . -4) (undo-tree-id1425 . -4) (undo-tree-id1426 . -4) (undo-tree-id1427 . -4) (undo-tree-id1428 . -4) (undo-tree-id1429 . -4) (undo-tree-id1430 . -4) (undo-tree-id1431 . -4) (undo-tree-id1432 . -4) (undo-tree-id1433 . -4) (undo-tree-id1434 . -4) (undo-tree-id1435 . -4) (undo-tree-id1436 . -4) (undo-tree-id1437 . -4) (undo-tree-id1438 . -4) (undo-tree-id1439 . -4) (undo-tree-id1440 . -4) (undo-tree-id1441 . -4) (undo-tree-id1442 . -4) (undo-tree-id1443 . -4) (undo-tree-id1444 . -4) (undo-tree-id1445 . -4) (undo-tree-id1446 . -4) (undo-tree-id1447 . -4) (undo-tree-id1448 . -4) (undo-tree-id1449 . -4) (undo-tree-id1450 . -4) 2894 (2889 . 2894) 2863) nil (26086 7692 967372 41000) 0 nil])
([nil nil ((#("if [[ ERRORS -eq 1 ]]; then

fi
" 0 2 (face font-lock-keyword-face fontified t) 2 23 (fontified t) 23 27 (face font-lock-keyword-face fontified t) 27 28 (fontified t) 28 29 (fontified t) 29 31 (face font-lock-keyword-face fontified t) 31 32 (fontified t)) . 2862) (undo-tree-id987 . -29) (undo-tree-id988 . -31) (undo-tree-id989 . -29) (undo-tree-id990 . 4) (undo-tree-id991 . -29) (undo-tree-id992 . -29) (undo-tree-id993 . -29) (undo-tree-id994 . -29) (undo-tree-id995 . -29) (undo-tree-id996 . -29) (undo-tree-id997 . -29) (undo-tree-id998 . -29) (undo-tree-id999 . -29) (undo-tree-id1000 . -29) (undo-tree-id1001 . -29) (undo-tree-id1002 . -29) (undo-tree-id1003 . -29) (undo-tree-id1004 . -29) (undo-tree-id1005 . -29) (undo-tree-id1006 . -29) (undo-tree-id1007 . -29) (undo-tree-id1008 . -29) (undo-tree-id1009 . -29) (undo-tree-id1010 . -29) (undo-tree-id1011 . -29) (undo-tree-id1012 . -29) (undo-tree-id1013 . -29) (undo-tree-id1014 . -29) (undo-tree-id1015 . -29) (undo-tree-id1016 . -29) (undo-tree-id1017 . -29) (undo-tree-id1018 . -29) (undo-tree-id1019 . -29) (undo-tree-id1020 . -29) (undo-tree-id1021 . -29) (undo-tree-id1022 . -29) (undo-tree-id1023 . -29) (undo-tree-id1024 . -29) (undo-tree-id1025 . -29) (undo-tree-id1026 . -29) (undo-tree-id1027 . -29) (undo-tree-id1028 . -29) (undo-tree-id1029 . -29) (undo-tree-id1030 . -29) (undo-tree-id1031 . -29) (undo-tree-id1032 . -29) (undo-tree-id1033 . -29) (undo-tree-id1034 . -29) (undo-tree-id1035 . -29) (undo-tree-id1036 . -29) (undo-tree-id1037 . -29) (undo-tree-id1038 . -29) (undo-tree-id1039 . -29) (undo-tree-id1040 . -29) (undo-tree-id1041 . -29) (undo-tree-id1042 . -29) (undo-tree-id1043 . -29) (undo-tree-id1044 . -29) (undo-tree-id1045 . -29) (undo-tree-id1046 . -29) (undo-tree-id1047 . -29) (undo-tree-id1048 . -29) (undo-tree-id1049 . -29) (undo-tree-id1050 . -29) (undo-tree-id1051 . -29) (undo-tree-id1052 . -29) (undo-tree-id1053 . -29) (undo-tree-id1054 . -29) (undo-tree-id1055 . -29) (undo-tree-id1056 . -29) (undo-tree-id1057 . -29) (undo-tree-id1058 . -29) (undo-tree-id1059 . -29) (undo-tree-id1060 . -29) (undo-tree-id1061 . -29) (undo-tree-id1062 . -29) (undo-tree-id1063 . -29) (undo-tree-id1064 . -29) (undo-tree-id1065 . -29) (undo-tree-id1066 . -29) (undo-tree-id1067 . -29) (undo-tree-id1068 . -29) (undo-tree-id1069 . -29) (undo-tree-id1070 . -29) (undo-tree-id1071 . -29) (undo-tree-id1072 . -29) (undo-tree-id1073 . -29) (undo-tree-id1074 . -29) (undo-tree-id1075 . -29) (undo-tree-id1076 . -29) (undo-tree-id1077 . -9) (undo-tree-id1078 . -9) (undo-tree-id1079 . -9) (undo-tree-id1080 . -9) (undo-tree-id1081 . -9) (undo-tree-id1082 . -9) (undo-tree-id1083 . -9) (undo-tree-id1084 . -9) (undo-tree-id1085 . -9) (undo-tree-id1086 . -9) (undo-tree-id1087 . -9) (undo-tree-id1088 . -9) (undo-tree-id1089 . -9) (undo-tree-id1090 . -9) (undo-tree-id1091 . -9) (undo-tree-id1092 . -9) (undo-tree-id1093 . -9) (undo-tree-id1094 . -9) (undo-tree-id1095 . -9) (undo-tree-id1096 . -9) (undo-tree-id1097 . -9) (undo-tree-id1098 . -9) (undo-tree-id1099 . -9) (undo-tree-id1100 . -9) (undo-tree-id1101 . -9) (undo-tree-id1102 . -9) (undo-tree-id1103 . -9) (undo-tree-id1104 . -9) (undo-tree-id1105 . -9) (undo-tree-id1106 . -9) (undo-tree-id1107 . -9) (undo-tree-id1108 . -9) (undo-tree-id1109 . -9) (undo-tree-id1110 . -9) (undo-tree-id1111 . -9) (undo-tree-id1112 . -9) (undo-tree-id1113 . -9) (undo-tree-id1114 . -9) (undo-tree-id1115 . -9) (undo-tree-id1116 . -9) (undo-tree-id1117 . -9) (undo-tree-id1118 . -9) (undo-tree-id1119 . -9) (undo-tree-id1120 . -9) (undo-tree-id1121 . -9) (undo-tree-id1122 . -9) (undo-tree-id1123 . -9) (undo-tree-id1124 . -9) (undo-tree-id1125 . -9) (undo-tree-id1126 . -9) (undo-tree-id1127 . -9) (undo-tree-id1128 . -9) (undo-tree-id1129 . -9) (undo-tree-id1130 . -9) (undo-tree-id1131 . -9) (undo-tree-id1132 . -9) (undo-tree-id1133 . -9) (undo-tree-id1134 . -9) (undo-tree-id1135 . -9) (undo-tree-id1136 . -9) (undo-tree-id1137 . -9) (undo-tree-id1138 . -9) (undo-tree-id1139 . -9) (undo-tree-id1140 . -9) (undo-tree-id1141 . -9) (undo-tree-id1142 . -9) (undo-tree-id1143 . -9) (undo-tree-id1144 . -9) (undo-tree-id1145 . -9) (undo-tree-id1146 . -9) (undo-tree-id1147 . -9) (undo-tree-id1148 . -9) (undo-tree-id1149 . -29) (undo-tree-id1150 . -29) (undo-tree-id1151 . -29) (undo-tree-id1152 . -29) (undo-tree-id1153 . -29) (undo-tree-id1154 . -29) (undo-tree-id1155 . -29) (undo-tree-id1156 . -29) (undo-tree-id1157 . -29) (undo-tree-id1158 . -29) (undo-tree-id1159 . -29) (undo-tree-id1160 . -29) (undo-tree-id1161 . -29) (undo-tree-id1162 . -29) (undo-tree-id1163 . -29) (undo-tree-id1164 . -29) (undo-tree-id1165 . -29) (undo-tree-id1166 . -29) (undo-tree-id1167 . -29) (undo-tree-id1168 . -29) (undo-tree-id1169 . -29) (undo-tree-id1170 . -29) (undo-tree-id1171 . -29) (undo-tree-id1172 . -29) (undo-tree-id1173 . -29) (undo-tree-id1174 . -29) (undo-tree-id1175 . -29) (undo-tree-id1176 . -29) (undo-tree-id1177 . -29) (undo-tree-id1178 . -29) (undo-tree-id1179 . -29) (undo-tree-id1180 . -29) (undo-tree-id1181 . -29) (undo-tree-id1182 . -29) (undo-tree-id1183 . -29) (undo-tree-id1184 . -29) (undo-tree-id1185 . -29) (undo-tree-id1186 . -29) (undo-tree-id1187 . -29) (undo-tree-id1188 . -29) (undo-tree-id1189 . -29) (undo-tree-id1190 . -29) (undo-tree-id1191 . -29) (undo-tree-id1192 . -29) (undo-tree-id1193 . -29) (undo-tree-id1194 . -29) (undo-tree-id1195 . -29) (undo-tree-id1196 . -29) (undo-tree-id1197 . -29) (undo-tree-id1198 . -29) (undo-tree-id1199 . -29) (undo-tree-id1200 . -29) (undo-tree-id1201 . -29) (undo-tree-id1202 . -29) (undo-tree-id1203 . -29) (undo-tree-id1204 . -29) (undo-tree-id1205 . -29) (undo-tree-id1206 . -29) (undo-tree-id1207 . -29) (undo-tree-id1208 . -29) (undo-tree-id1209 . -29) (undo-tree-id1210 . -29) (undo-tree-id1211 . -29) (undo-tree-id1212 . -29) (undo-tree-id1213 . -29) (undo-tree-id1214 . -29) (undo-tree-id1215 . -29) (undo-tree-id1216 . -29) (undo-tree-id1217 . -29) (undo-tree-id1218 . -29) (undo-tree-id1219 . -29) (undo-tree-id1220 . -29) (undo-tree-id1221 . -29) (undo-tree-id1222 . -29) (undo-tree-id1223 . -29) (undo-tree-id1224 . -29) (undo-tree-id1225 . -29) (undo-tree-id1226 . -29) (undo-tree-id1227 . -29) (undo-tree-id1228 . -29) (undo-tree-id1229 . -29) (undo-tree-id1230 . -29) (undo-tree-id1231 . -29) (undo-tree-id1232 . -29) (undo-tree-id1233 . -29) (undo-tree-id1234 . -29) (undo-tree-id1235 . -29) (undo-tree-id1236 . -29) (undo-tree-id1237 . -29) (undo-tree-id1238 . -29) (undo-tree-id1239 . -29) (undo-tree-id1240 . -29) (undo-tree-id1241 . -29) (undo-tree-id1242 . -29) (undo-tree-id1243 . -29) (undo-tree-id1244 . -29) (undo-tree-id1245 . -29) (undo-tree-id1246 . -29) (undo-tree-id1247 . -29) (undo-tree-id1248 . -29) (undo-tree-id1249 . -29) (undo-tree-id1250 . -29) (undo-tree-id1251 . -29) (undo-tree-id1252 . -29) (undo-tree-id1253 . -29) (undo-tree-id1254 . -29) (undo-tree-id1255 . -29) (undo-tree-id1256 . -29) (undo-tree-id1257 . -29) (undo-tree-id1258 . -29) (undo-tree-id1259 . -29) (undo-tree-id1260 . -29) (undo-tree-id1261 . -29) (undo-tree-id1262 . -29) (undo-tree-id1263 . -29) (undo-tree-id1264 . -29) (undo-tree-id1265 . -29) (undo-tree-id1266 . -29) (undo-tree-id1267 . -29) (undo-tree-id1268 . -29) (undo-tree-id1269 . -29) (undo-tree-id1270 . -29) (undo-tree-id1271 . -29) (undo-tree-id1272 . -29) (undo-tree-id1273 . -29) (undo-tree-id1274 . -29) (undo-tree-id1275 . -29) (undo-tree-id1276 . -29) (undo-tree-id1277 . -29) (undo-tree-id1278 . -29) (undo-tree-id1279 . -29) (undo-tree-id1280 . -29) (undo-tree-id1281 . -29) (undo-tree-id1282 . -31) (undo-tree-id1283 . -30) (undo-tree-id1284 . -30) (undo-tree-id1285 . -30) (undo-tree-id1286 . -30) (undo-tree-id1287 . -30) (undo-tree-id1288 . -30) (undo-tree-id1289 . -30) (undo-tree-id1290 . -30) (undo-tree-id1291 . -30) (undo-tree-id1292 . -30) (undo-tree-id1293 . -30) (undo-tree-id1294 . -1) (undo-tree-id1295 . -1) (undo-tree-id1296 . -1) (undo-tree-id1297 . -1) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -28) (undo-tree-id1313 . -28) (undo-tree-id1314 . -28) (undo-tree-id1315 . -28) (undo-tree-id1316 . -28) (undo-tree-id1317 . -28) (undo-tree-id1318 . -28) (undo-tree-id1319 . -28) (undo-tree-id1320 . -28) (undo-tree-id1321 . -28) (undo-tree-id1322 . -28) (undo-tree-id1323 . -28) (undo-tree-id1324 . -28) (undo-tree-id1325 . -28) (undo-tree-id1326 . -28) (undo-tree-id1327 . -28) (undo-tree-id1328 . -28) (undo-tree-id1329 . -28) (undo-tree-id1330 . -28) (undo-tree-id1331 . -28) (undo-tree-id1332 . -28) (undo-tree-id1333 . -28) (undo-tree-id1334 . -28) (undo-tree-id1335 . -28) (undo-tree-id1336 . -28) (undo-tree-id1337 . -28) (undo-tree-id1338 . -28) (undo-tree-id1339 . -28) (undo-tree-id1340 . -28) (undo-tree-id1341 . -28) (undo-tree-id1342 . -28) (undo-tree-id1343 . -28) (undo-tree-id1344 . -28) (undo-tree-id1345 . -28) (undo-tree-id1346 . -28) (undo-tree-id1347 . -28) (undo-tree-id1348 . -28) (undo-tree-id1349 . -28) (undo-tree-id1350 . -28) (undo-tree-id1351 . -28) (undo-tree-id1352 . -28) (undo-tree-id1353 . -28) (undo-tree-id1354 . -28) (undo-tree-id1355 . -28) (undo-tree-id1356 . -28) (undo-tree-id1357 . -28) (undo-tree-id1358 . -28) (undo-tree-id1359 . -28) (undo-tree-id1360 . -28) (undo-tree-id1361 . -28) (undo-tree-id1362 . -28) (undo-tree-id1363 . -28) (undo-tree-id1364 . -28) (undo-tree-id1365 . -28) (undo-tree-id1366 . -28) (undo-tree-id1367 . -28) (undo-tree-id1368 . -28) (undo-tree-id1369 . -28) (undo-tree-id1370 . -28) (undo-tree-id1371 . -28) (undo-tree-id1372 . -28) (undo-tree-id1373 . -28) (undo-tree-id1374 . -28) (undo-tree-id1375 . -28) (undo-tree-id1376 . -28) (undo-tree-id1377 . -28) (undo-tree-id1378 . -28) (undo-tree-id1379 . -28) (undo-tree-id1380 . -28) (undo-tree-id1381 . -28) (undo-tree-id1382 . -28) (undo-tree-id1383 . -28) (undo-tree-id1384 . -28) (undo-tree-id1385 . -28) (undo-tree-id1386 . -28) (undo-tree-id1387 . -28) (undo-tree-id1388 . -29) (undo-tree-id1389 . -29) (undo-tree-id1390 . -29) (undo-tree-id1391 . -29) (undo-tree-id1392 . -29) (undo-tree-id1393 . -29) (undo-tree-id1394 . -29) (undo-tree-id1395 . -29) (undo-tree-id1396 . -29) (undo-tree-id1397 . -29) (undo-tree-id1398 . -29) (undo-tree-id1399 . -29) (undo-tree-id1400 . -29) (undo-tree-id1401 . -29) (undo-tree-id1402 . -29) (undo-tree-id1403 . -29) (undo-tree-id1404 . -29) (undo-tree-id1405 . -29) (undo-tree-id1406 . -29) (undo-tree-id1407 . -29) (undo-tree-id1408 . -29) (undo-tree-id1409 . -29) (undo-tree-id1410 . -29) (undo-tree-id1411 . -29) (undo-tree-id1412 . -29) (undo-tree-id1413 . -29) (undo-tree-id1414 . -29) (undo-tree-id1415 . -29) (undo-tree-id1416 . -29) (undo-tree-id1417 . -29) (undo-tree-id1418 . -29) (undo-tree-id1419 . -32) 2891) nil (26086 7692 967350 221000) 0 nil])
([nil nil ((2874 . 2875) (2872 . 2874) (2869 . 2869) (2869 . 2872) (#("e" 0 1 (face font-lock-variable-name-face fontified t)) . -2869) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) 2870 (2863 . 2870) (2862 . 2863) 2862) nil (26086 7692 967138 210000) 0 nil])
([nil nil ((2875 . 2876)) nil (26086 7692 967102 119000) 0 nil])
([nil nil ((#("ERRORS" 0 6 (face font-lock-variable-name-face fontified t)) . 224) (undo-tree-id1679 . -5) (t 26086 7692 967154 866000)) nil (26086 7706 806090 342000) 0 nil])
([nil nil ((232 . 232) (232 . 233) (228 . 228) (228 . 232) (227 . 227) (227 . 228) (224 . 224) (224 . 227)) nil (26086 7706 806205 203000) 0 nil])
([nil nil ((#("ERRORS" 0 6 (face font-lock-variable-name-face fontified t)) . 538) (undo-tree-id1681 . -5) (undo-tree-id1682 . -3) (undo-tree-id1683 . -3) (undo-tree-id1684 . -3) (undo-tree-id1685 . -3) (undo-tree-id1686 . -3) (undo-tree-id1687 . -3) (undo-tree-id1688 . -3) (undo-tree-id1689 . -3) (undo-tree-id1690 . -3) (undo-tree-id1691 . -3) (undo-tree-id1692 . -3) (undo-tree-id1693 . -3) (undo-tree-id1694 . -3) (undo-tree-id1695 . -3) (undo-tree-id1696 . -3) (undo-tree-id1697 . -3) (undo-tree-id1698 . -3) (undo-tree-id1699 . -3) (undo-tree-id1700 . -3) (undo-tree-id1701 . -3) (undo-tree-id1702 . -3) (undo-tree-id1703 . -3) (undo-tree-id1704 . -3) (undo-tree-id1705 . -3) (undo-tree-id1706 . -3) (undo-tree-id1707 . -3) (undo-tree-id1708 . -3) (undo-tree-id1709 . -3) (undo-tree-id1710 . -3) (undo-tree-id1711 . -3) (undo-tree-id1712 . -6)) nil (26086 7714 893341 375000) 0 nil] [nil nil ((1 . 2) (#("#!/bin/bash
" 0 1 (face font-lock-comment-delimiter-face fontified t) 1 7 (face font-lock-comment-face fontified t) 7 11 (face font-lock-keyword-face fontified t) 11 12 (face font-lock-comment-face fontified t)) . 1) (undo-tree-id1675 . -11) (undo-tree-id1676 . -12) (undo-tree-id1677 . -12) (undo-tree-id1678 . -12)) ((1 . 13) (#("
" 0 1 (fontified t)) . 1) (undo-tree-id1680 . 1)) (26086 7706 806083 842000) 0 nil])
([nil nil ((541 . 547) (538 . 538) (538 . 541)) nil (26086 7714 893315 775000) 0 nil])
nil
([nil nil ((#("ERRORS" 0 6 (face font-lock-variable-name-face fontified t)) . 869) (undo-tree-id1713 . -5) (t 26086 7714 891300 141000)) nil (26086 7718 973557 618000) 0 nil])
([nil nil ((872 . 878) (869 . 869) (869 . 872)) nil (26086 7718 973547 728000) 0 nil])
([nil nil ((#("ERRORS" 0 6 (face font-lock-variable-name-face fontified t)) . 1207) (undo-tree-id1714 . -5) (t 26086 7718 971327 177000)) nil (26086 7722 894602 758000) 0 nil])
([nil nil ((1210 . 1216) (1207 . 1207) (1207 . 1210)) nil (26086 7722 894593 318000) 0 nil])
([nil nil ((2624 . 2628) (#(" " 0 1 (face font-lock-keyword-face fontified nil)) . 2623) (undo-tree-id1802 . -1) (2624 . 2625) (t 26086 7722 895353 178000)) nil (26086 7740 316202 839000) 0 nil])
([nil nil ((2658 . 2662) (#(" " 0 1 (face font-lock-keyword-face fontified nil)) . 2657) (undo-tree-id1756 . -1) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (2658 . 2659)) nil (26086 7740 316198 649000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 2694) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (2695 . 2696)) nil (26086 7741 411792 875000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2695) (undo-tree-id1806 . -4) (undo-tree-id1807 . -4) (undo-tree-id1808 . -4) (undo-tree-id1809 . -4) (undo-tree-id1810 . -4) (undo-tree-id1811 . -4) (undo-tree-id1812 . -4) (undo-tree-id1813 . -4) (undo-tree-id1814 . -4) (undo-tree-id1815 . -4) (undo-tree-id1816 . -4) (undo-tree-id1817 . -4) (undo-tree-id1818 . -4) (undo-tree-id1819 . -4) (undo-tree-id1820 . -4) (undo-tree-id1821 . -4) (undo-tree-id1822 . -4) (undo-tree-id1823 . -4) (undo-tree-id1824 . -4) (undo-tree-id1825 . -4) (undo-tree-id1826 . -4) (undo-tree-id1827 . -4) 2699 (2694 . 2699) (t 26086 7740 315468 608000) 2658) nil (26086 7748 746479 682000) 0 nil] [nil nil ((nil rear-nonsticky nil 2664 . 2665) (nil fontified nil 2659 . 2665) (2659 . 2665) 2658 (t 26086 7740 315468 608000)) ((#("ERRORS" 0 5 (fontified nil) 5 6 (rear-nonsticky nil fontified nil)) . 2659) (undo-tree-id1803 . -5) (undo-tree-id1804 . -5) (undo-tree-id1805 . -5) (nil rear-nonsticky t 2664 . 2665)) (26086 7741 411615 914000) 0 nil])
([nil nil ((2709 . 2710) (2702 . 2702) (2702 . 2709) (2695 . 2695) (2695 . 2702)) nil (26086 7748 746454 841000) 0 nil])
nil
([nil nil ((#("ERRORS" 0 6 (face font-lock-variable-name-face fontified t)) . 2905) (undo-tree-id1828 . -5) (undo-tree-id1829 . -5) (undo-tree-id1830 . -5) (undo-tree-id1831 . -6) (t 26086 7748 747524 482000)) nil (26086 7755 213577 511000) 0 nil])
([nil nil ((2908 . 2914) (2905 . 2905) (2905 . 2908)) nil (26086 7755 213560 120000) 0 nil])
([nil nil ((2432 . 2439) (#(" " 0 1 (fontified nil)) . 2431) (undo-tree-id1874 . -1) (2432 . 2433) (t 26086 7755 211567 314000)) nil (26086 7801 220927 414000) 0 nil])
([nil nil ((2389 . 2396) (#(" " 0 1 (fontified nil)) . 2388) (undo-tree-id1873 . -1) (2389 . 2390)) nil (26086 7801 220925 964000) 0 nil])
([nil nil ((2485 . 2488) (#(" " 0 1 (fontified nil)) . 2484) (undo-tree-id1832 . -1) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) (undo-tree-id1851 . -1) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (2485 . 2486)) nil (26086 7801 220923 144000) 0 nil])
([nil nil ((nil rear-nonsticky nil 2488 . 2489) (#("
" 0 1 (fontified nil)) . -2500) (2484 . 2501) 2441) nil (26086 7801 220896 604000) 0 nil])
([nil nil ((2489 . 2492) (t 26086 7801 219872 177000)) nil (26086 8088 148294 716000) 0 nil])
([nil nil ((779 . 785) (731 . 733) (775 . 776) (t 26086 8088 709777 172000)) nil (26086 11474 971474 867000) 0 nil] [nil nil ((apply -2 2485 2506 undo--wrap-and-run-primitive-undo 2485 2506 ((2492 . 2494) 2489))) ((apply 2 2485 2504 undo--wrap-and-run-primitive-undo 2485 2504 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 2492) 2489))) (26086 8083 505513 612000) 0 nil])
([nil nil ((apply -2 726 780 undo--wrap-and-run-primitive-undo 726 780 ((733 . 735) 732))) nil (26086 11474 971471 237000) 0 nil])
nil
([nil nil ((1109 . 1115) (1062 . 1064) (1105 . 1106) (t 26086 11474 974310 100000)) nil (26086 11483 445672 104000) 0 nil])
([nil nil ((apply -2 1057 1110 undo--wrap-and-run-primitive-undo 1057 1110 ((1064 . 1066) 1063))) nil (26086 11483 445669 214000) 0 nil])
([nil nil ((2234 . 2238) (#(" " 0 1 (face font-lock-keyword-face fontified nil)) . 2233) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (undo-tree-id1959 . -1) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (undo-tree-id1976 . -1) (2234 . 2235) (t 26086 11483 446362 422000)) nil (26086 11495 591097 606000) 0 nil])
([nil nil ((2292 . 2296) (#(" " 0 1 (face font-lock-keyword-face fontified nil)) . 2291) (undo-tree-id1925 . -1) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (2292 . 2293)) nil (26086 11495 591080 115000) 0 nil])
([nil nil ((#(" " 0 1 (fontified nil)) . 2352) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (2353 . 2354)) nil (26086 11495 591072 445000) 0 nil])
([nil nil ((apply -2 2234 2289 undo--wrap-and-run-primitive-undo 2234 2289 ((2238 . 2240) 2234))) nil (26086 11500 578306 502000) 0 nil])
([nil nil ((2293 . 2297) (2288 . 2293) (t 26086 11500 578470 304000) 2234) nil (26086 11508 880110 90000) 0 nil])
([nil nil ((#("    pass
" 0 8 (fontified t) 8 9 (fontified t)) . 2289) (undo-tree-id1977 . -8) (undo-tree-id1978 . 1) (undo-tree-id1979 . -7) (undo-tree-id1980 . -7) (undo-tree-id1981 . -7) (undo-tree-id1982 . -7) (undo-tree-id1983 . -7) (undo-tree-id1984 . -7) (undo-tree-id1985 . -7) (undo-tree-id1986 . -7) (undo-tree-id1987 . -9) 2296) nil (26086 11508 880106 60000) 0 nil])
([nil nil ((2293 . 2298) (#("c" 0 1 (fontified t)) . -2293) (undo-tree-id1988 . -1) (undo-tree-id1989 . -1) (#("o" 0 1 (fontified t)) . -2294) (undo-tree-id1990 . -1) (undo-tree-id1991 . -1) (#("d" 0 1 (fontified t)) . -2295) (undo-tree-id1992 . -1) (undo-tree-id1993 . -1) 2296 (2295 . 2296) (2293 . 2293) (2293 . 2295) (#("c" 0 1 (fontified t)) . -2293) (undo-tree-id1994 . -1) 2294 (2293 . 2294) (2288 . 2293) (t 26086 11508 882523 575000) 2237) nil (26086 11517 755800 187000) 0 nil])
([nil nil ((2298 . 2300)) nil (26086 11517 755781 187000) 0 nil])
([nil nil ((apply -2 2483 2531 undo--wrap-and-run-primitive-undo 2483 2531 ((2490 . 2492) 2493))) nil (26086 11521 782491 957000) 0 nil])
([nil nil ((#("    echo \"\"
" 0 4 (fontified t) 4 8 (face font-lock-builtin-face fontified t) 8 9 (fontified t) 9 11 (face font-lock-string-face fontified t) 11 12 (fontified t)) . 2289) (undo-tree-id1995 . -11) (undo-tree-id1996 . 1) (undo-tree-id1997 . -10) (undo-tree-id1998 . -10) (undo-tree-id1999 . -10) (undo-tree-id2000 . -10) (undo-tree-id2001 . -10) (undo-tree-id2002 . -10) (undo-tree-id2003 . -10) (undo-tree-id2004 . -10) (undo-tree-id2005 . -10) (undo-tree-id2006 . -10) (undo-tree-id2007 . -10) (undo-tree-id2008 . -10) (undo-tree-id2009 . -10) (undo-tree-id2010 . -10) (undo-tree-id2011 . -10) (undo-tree-id2012 . -10) (undo-tree-id2013 . -10) (undo-tree-id2014 . -10) (undo-tree-id2015 . -10) (undo-tree-id2016 . -10) (undo-tree-id2017 . -10) (undo-tree-id2018 . -10) (undo-tree-id2019 . -10) (undo-tree-id2020 . -10) (undo-tree-id2021 . -10) (undo-tree-id2022 . -10) (undo-tree-id2023 . -10) (undo-tree-id2024 . -10) (undo-tree-id2025 . -10) (undo-tree-id2026 . -10) (undo-tree-id2027 . -10) (undo-tree-id2028 . -10) (undo-tree-id2029 . -12) 2299 (t 26086 11521 782607 574000)) nil (26086 11524 440717 390000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2289) (undo-tree-id2145 . -4) 2293 (2288 . 2293) (t 26086 11524 442625 78000) 2237) nil (26086 11537 416612 83000) 0 nil])
([nil nil ((#("    " 0 4 (fontified t)) . -2290) (undo-tree-id2114 . -4) (undo-tree-id2115 . -4) (undo-tree-id2116 . -4) (undo-tree-id2117 . -4) (undo-tree-id2118 . -4) (undo-tree-id2119 . -4) (undo-tree-id2120 . -4) (undo-tree-id2121 . -4) (undo-tree-id2122 . -4) (undo-tree-id2123 . -4) (undo-tree-id2124 . -4) (undo-tree-id2125 . -4) (undo-tree-id2126 . -4) (undo-tree-id2127 . -4) (undo-tree-id2128 . -4) (undo-tree-id2129 . -4) (undo-tree-id2130 . -4) (undo-tree-id2131 . -4) (undo-tree-id2132 . -4) (undo-tree-id2133 . -4) (undo-tree-id2134 . -4) (undo-tree-id2135 . -4) (undo-tree-id2136 . -4) (undo-tree-id2137 . -4) (undo-tree-id2138 . -4) (undo-tree-id2139 . -4) (undo-tree-id2140 . -4) (undo-tree-id2141 . -4) (undo-tree-id2142 . -4) (undo-tree-id2143 . -4) (undo-tree-id2144 . -4) 2294 (2289 . 2294) 2289) nil (26086 11537 416609 503000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2290) (undo-tree-id2112 . 1) (undo-tree-id2113 . -1)) nil (26086 11537 416594 193000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 2289) (undo-tree-id2030 . -1) (undo-tree-id2031 . -1) (undo-tree-id2032 . -1) (undo-tree-id2033 . -1) (undo-tree-id2034 . -1) (undo-tree-id2035 . -1) (undo-tree-id2036 . -1) (undo-tree-id2037 . -1) (undo-tree-id2038 . -1) (undo-tree-id2039 . -1) (undo-tree-id2040 . -1) (undo-tree-id2041 . -1) (undo-tree-id2042 . -1) (undo-tree-id2043 . -1) (undo-tree-id2044 . -1) (undo-tree-id2045 . -1) (undo-tree-id2046 . -1) (undo-tree-id2047 . -1) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) (undo-tree-id2056 . -1) (undo-tree-id2057 . -1) (undo-tree-id2058 . -1) (undo-tree-id2059 . -1) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) (undo-tree-id2064 . -1) (undo-tree-id2065 . -1) (undo-tree-id2066 . -1) (undo-tree-id2067 . -1) (undo-tree-id2068 . -1) (undo-tree-id2069 . -1) (undo-tree-id2070 . -1) (undo-tree-id2071 . -1) (undo-tree-id2072 . -1) (undo-tree-id2073 . -1) (undo-tree-id2074 . -1) (undo-tree-id2075 . -1) (undo-tree-id2076 . -1) (undo-tree-id2077 . -1) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . -1) (undo-tree-id2082 . -1) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (undo-tree-id2094 . -1) (undo-tree-id2095 . -1) (undo-tree-id2096 . -1) (undo-tree-id2097 . -1) (undo-tree-id2098 . -1) (undo-tree-id2099 . -1) (undo-tree-id2100 . -1) (undo-tree-id2101 . -1) (undo-tree-id2102 . -1) (undo-tree-id2103 . -1) (undo-tree-id2104 . -1) (undo-tree-id2105 . -1) (undo-tree-id2106 . -1) (undo-tree-id2107 . -1) (undo-tree-id2108 . -1) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (undo-tree-id2111 . -1)) nil (26086 11537 416589 413000) 0 nil])
([nil nil ((apply 2 2234 2286 undo--wrap-and-run-primitive-undo 2234 2286 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2238) 2234))) nil (26086 11537 416455 892000) 0 nil])
([nil nil ((apply -2 2692 2723 undo--wrap-and-run-primitive-undo 2692 2723 ((2696 . 2698) 2692))) nil (26086 11540 127842 300000) 0 nil])
([nil nil ((apply 2 2692 2720 undo--wrap-and-run-primitive-undo 2692 2720 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2696) 2692))) nil (26086 11545 24267 350000) 0 nil])
([nil nil ((apply -2 2897 2964 undo--wrap-and-run-primitive-undo 2897 2964 ((2900 . 2902) 2897))) nil (26086 11557 381213 452000) 0 nil])
([nil nil ((apply 2 2897 2961 undo--wrap-and-run-primitive-undo 2897 2961 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . -2900) 2897))) nil (26086 11572 652360 22000) 0 nil] [nil nil ((apply -2 2892 2899 undo--wrap-and-run-primitive-undo 2892 2899 ((2892 . 2894)))) ((apply 2 2892 2897 undo--wrap-and-run-primitive-undo 2892 2897 ((#("# " 0 2 (face font-lock-comment-delimiter-face fontified t)) . 2892)))) (26086 11547 200151 20000) 0 nil])
([nil current ((#("
" 0 1 (fontified t)) . 2965) (undo-tree-id2150 . -1) (undo-tree-id2151 . -1) (undo-tree-id2152 . -1) (undo-tree-id2153 . -1) (undo-tree-id2154 . -1) (undo-tree-id2155 . -1) (undo-tree-id2156 . -1) (undo-tree-id2157 . -1) (undo-tree-id2158 . -1) (undo-tree-id2159 . -1) (undo-tree-id2160 . -1) (undo-tree-id2161 . -1) (undo-tree-id2162 . -1) (undo-tree-id2163 . -1) (undo-tree-id2164 . -1) (undo-tree-id2165 . -1) (undo-tree-id2166 . -1) (undo-tree-id2167 . -1) (undo-tree-id2168 . -1) (undo-tree-id2169 . -1) (undo-tree-id2170 . -1) (undo-tree-id2171 . -1) (undo-tree-id2172 . -1) (undo-tree-id2173 . -1) (undo-tree-id2174 . -1) (undo-tree-id2175 . -1) (undo-tree-id2176 . -1) (undo-tree-id2177 . -1) (undo-tree-id2178 . -1) (undo-tree-id2179 . -1) (undo-tree-id2180 . -1) (undo-tree-id2181 . -1) (undo-tree-id2182 . -1) (undo-tree-id2183 . -1) (undo-tree-id2184 . -1) (undo-tree-id2185 . -1) (undo-tree-id2186 . -1) (undo-tree-id2187 . -1) (undo-tree-id2188 . -1) (undo-tree-id2189 . -1) (undo-tree-id2190 . -1) (undo-tree-id2191 . -1) (undo-tree-id2192 . -1) (undo-tree-id2193 . -1) (undo-tree-id2194 . -1) (undo-tree-id2195 . -1) (undo-tree-id2196 . -1) (undo-tree-id2197 . -1) (undo-tree-id2198 . -1) (undo-tree-id2199 . -1) (undo-tree-id2200 . -1) (undo-tree-id2201 . -1) (undo-tree-id2202 . -1) (undo-tree-id2203 . -1) (undo-tree-id2204 . -1) (t 26086 11573 346957 698000)) nil (26086 11575 941380 205000) 0 nil] [nil nil ((2967 . 2968) (#("e" 0 1 (face font-lock-keyword-face fontified t)) . 2967) (undo-tree-id2146 . -1) (undo-tree-id2147 . -1)) ((2967 . 2968) (#("E" 0 1 (fontified t)) . 2967) (undo-tree-id2148 . -1) (undo-tree-id2149 . -1)) (26086 11572 652300 651000) 0 nil])
nil
nil
nil
